package assignmenti;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import java.util.stream.Collectors;

public class InvoiceUI extends JFrame {
    private List<Invoice> invoiceList;

    private JTextArea resultTextArea;

    public InvoiceUI(List<Invoice> invoiceList) {
        this.invoiceList = invoiceList;

        // Set up the JFrame
        setTitle("Invoice Application");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Create a panel to organize components
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());

        // Create a text area to display the results
        resultTextArea = new JTextArea(10, 40);
        resultTextArea.setEditable(false);

        // Create a scroll pane for the text area
        JScrollPane scrollPane = new JScrollPane(resultTextArea);

        // Create a panel for buttons
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout());

        // Create buttons for each part
        JButton partAButton = new JButton("Part A: Sort by partDescription");
        JButton partBButton = new JButton("Part B: Sort by pricePerItem");
        JButton partCButton = new JButton("Part C: Map and Sort by Quantity");
        JButton partDButton = new JButton("Part D: Map and Sort by Value");
        JButton partEButton = new JButton("Part E: Select Invoices $200-$500");
        JButton partFButton = new JButton("Part F: Find Invoice with 'Saw'");

        // Add action listeners to the buttons
        partAButton.addActionListener(e -> displayPartAResults());
        partBButton.addActionListener(e -> displayPartBResults());
        partCButton.addActionListener(e -> displayPartCResults());
        partDButton.addActionListener(e -> displayPartDResults());
        partEButton.addActionListener(e -> displayPartEResults());
        partFButton.addActionListener(e -> displayPartFResults());

        // Add buttons to the button panel
        buttonPanel.add(partAButton);
        buttonPanel.add(partBButton);
        buttonPanel.add(partCButton);
        buttonPanel.add(partDButton);
        buttonPanel.add(partEButton);
        buttonPanel.add(partFButton);

        // Add components to the main panel
        mainPanel.add(scrollPane, BorderLayout.CENTER);
        mainPanel.add(buttonPanel, BorderLayout.SOUTH);

        // Add the main panel to the frame
        add(mainPanel);

        setVisible(true);
    }

    private void displayPartAResults() {
        List<Invoice> sortedList = invoiceList.stream()
                .sorted(Comparator.comparing(Invoice::getPartDescription))
                .collect(Collectors.toList());

        displayResults("Part A: Sorted by partDescription", sortedList);
    }

    private void displayPartBResults() {
        List<Invoice> sortedList = invoiceList.stream()
                .sorted(Comparator.comparingDouble(Invoice::getPricePerItem))
                .collect(Collectors.toList());

        displayResults("Part B: Sorted by pricePerItem", sortedList);
    }

    private void displayPartCResults() {
        List<Map.Entry<String, Integer>> resultList = invoiceList.stream()
                .map(invoice -> new AbstractMap.SimpleEntry<>(invoice.getPartDescription(), invoice.getQuantity()))
                .sorted(Comparator.comparingInt(Map.Entry::getValue))
                .collect(Collectors.toList());

        displayResults("Part C: Mapped to partDescription and sorted by quantity", resultList);
    }

    private void displayPartDResults() {
        List<Map.Entry<String, Double>> resultList = invoiceList.stream()
                .map(invoice -> new AbstractMap.SimpleEntry<>(invoice.getPartDescription(), invoice.getPaymentAmount()))
                .sorted(Comparator.comparingDouble(Map.Entry::getValue))
                .collect(Collectors.toList());

        displayResults("Part D: Mapped to partDescription and sorted by value", resultList);
    }

    private void displayPartEResults() {
        List<Invoice> resultList = invoiceList.stream()
                .filter(invoice -> invoice.getPaymentAmount() >= 200 && invoice.getPaymentAmount() <= 500)
                .sorted(Comparator.comparingDouble(Invoice::getPaymentAmount))
                .collect(Collectors.toList());

        displayResults("Part E: Invoices within the range $200 to $500", resultList);
    }

    private void displayPartFResults() {
        Optional<Invoice> result = invoiceList.stream()
                .filter(invoice -> invoice.getPartDescription().toLowerCase().contains("saw"))
                .findAny();

        if (result.isPresent()) {
            displayResults("Part F: An Invoice with 'Saw' in partDescription", Collections.singletonList(result.get()));
        } else {
            displayResults("Part F: No Invoice found with 'Saw' in partDescription", Collections.emptyList());
        }
    }

    private void displayResults(String title, List<?> results) {
        resultTextArea.setText(title + "\n\n");
        for (Object item : results) {
            resultTextArea.append(item.toString() + "\n");
        }
    }

    public static void main(String[] args) {
        List<Invoice> invoiceList = new ArrayList<>(Arrays.asList(
                new Invoice("1", "Toothbrush", 1, 10),
                new Invoice("2", "Ketchup", 1, 12.2),
                new Invoice("3", "Chocolate", 1, 12.9),
                new Invoice("4", "Saw", 1, 14.2)
        ));

        SwingUtilities.invokeLater(() -> {
            new InvoiceUI(invoiceList);
        });
    }
}

