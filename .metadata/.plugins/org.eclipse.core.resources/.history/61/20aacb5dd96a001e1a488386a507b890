package assignmenti;

import java.util.*;
import java.util.stream.Collectors;

public class Invoice {
    private final String partNumber;
    private final String partDescription;
    private final int quantity;
    private final double pricePerItem;

    public Invoice(String partNumber, String partDescription, int quantity, double pricePerItem) {
        if (quantity < 0) {
            throw new IllegalArgumentException("Quantity must be >= 0");
        }
        if (pricePerItem < 0.0) {
            throw new IllegalArgumentException("Price per item must be >= 0");
        }

        this.quantity = quantity;
        this.partNumber = partNumber;
        this.partDescription = partDescription;
        this.pricePerItem = pricePerItem;
    }

    public String getPartNumber() {
        return partNumber;
    }

    public String getPartDescription() {
        return partDescription;
    }

    public int getQuantity() {
        return quantity;
    }

    public double getPricePerItem() {
        return pricePerItem;
    }

    @Override
    public String toString() {
        return String.format("%s:%n%s: %s (%s)%n%s: %d%n%s: $%,.2f", "invoice", "part number", getPartNumber(), getPartDescription(),
                "quantity", getQuantity(), "price per item", getPricePerItem());
    }

    public double getPaymentAmount() {
        return getQuantity() * getPricePerItem();
    }

    public static void main(String[] args) {
        List<Invoice> invoiceList = new ArrayList<>(Arrays.asList(
            new Invoice("1", "Toothbrush", 1, 10),
            new Invoice("2", "Ketchup", 1, 12.2),
            new Invoice("3", "Chocolate", 1, 12.9),
            new Invoice("4", "saw", 1, 14.2)
        ));

        List<Invoice> sortedList = invoiceList.stream()
                .sorted(Comparator.comparing(Invoice::getPartDescription))
                .collect(Collectors.toList());

        System.out.println(sortedList);

        List<Invoice> sortedList2 = invoiceList.stream()
                .sorted(Comparator.comparingDouble(Invoice::getPricePerItem))
                .collect(Collectors.toList());

        System.out.println(sortedList2);

        Map<String, Invoice> invoiceMap = invoiceList.stream()
                .collect(Collectors.toMap(Invoice::getPartDescription, invoice -> invoice))
                .entrySet()
                .stream()
                .sorted(Map.Entry.comparingByValue(Comparator.comparingInt(Invoice::getQuantity)))
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (oldValue, newValue) -> oldValue, LinkedHashMap::new));

        System.out.println(invoiceMap);

        Map<String, Invoice> invoiceMap2 = invoiceList.stream()
                .collect(Collectors.toMap(Invoice::getPartDescription, invoice -> invoice))
                .entrySet()
                .stream()
                .sorted(Map.Entry.comparingByValue(Comparator.comparingDouble(Invoice::getPaymentAmount)))
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (oldValue, newValue) -> oldValue, LinkedHashMap::new));

        System.out.println(invoiceMap2);

        Map<String, Invoice> invoiceMap3 = invoiceList.stream()
                .filter(invoice -> invoice.getPaymentAmount() >= 200 && invoice.getPaymentAmount() <= 500)
                .collect(Collectors.toMap(Invoice::getPartDescription, invoice -> invoice))
                .entrySet()
                .stream()
                .sorted(Map.Entry.comparingByValue(Comparator.comparingDouble(Invoice::getPaymentAmount)))
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (oldValue, newValue) -> oldValue, LinkedHashMap::new));

        System.out.println(invoiceMap3);

        Invoice invoice = invoiceList.stream()
                .filter(invoice1 -> invoice1.getPartDescription().contains("saw"))
                .findAny()
                .orElse(null);

        System.out.println(invoice);
    }
}

