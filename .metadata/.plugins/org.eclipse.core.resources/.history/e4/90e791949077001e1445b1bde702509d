import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;
import java.util.Comparator;

public class InvoiceApp extends JFrame {
    private DefaultTableModel tableModel;
    private JTable table;
    private JTextField partNumberField, partDescriptionField, quantityField, priceField;
    private JButton addButton, updateButton, deleteButton;
    private JLabel selectedPartNumber, selectedPartDescription, selectedQuantity, selectedPrice, selectedInvoiceValue;

    private List<Invoice> invoiceList = new ArrayList<>();

    public InvoiceApp() {
        setTitle("Java Assignment Question 1.i");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        tableModel = new DefaultTableModel();
        tableModel.addColumn("Part Number");
        tableModel.addColumn("Part Description");
        tableModel.addColumn("Quantity");
        tableModel.addColumn("Price Per Item");
        tableModel.addColumn("Invoice Value");

        table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);
        add(scrollPane, BorderLayout.CENTER);

        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(5, 2));
        inputPanel.add(new JLabel("Part Number:"));
        partNumberField = new JTextField();
        inputPanel.add(partNumberField);
        inputPanel.add(new JLabel("Part Description:"));
        partDescriptionField = new JTextField();
        inputPanel.add(partDescriptionField);
        inputPanel.add(new JLabel("Quantity:"));
        quantityField = new JTextField();
        inputPanel.add(quantityField);
        inputPanel.add(new JLabel("Price Per Item:"));
        priceField = new JTextField();
        inputPanel.add(priceField);

        addButton = new JButton("Add");
        addButton.addActionListener(e -> addInvoice());
        updateButton = new JButton("Update");
        updateButton.addActionListener(e -> updateInvoice());
        deleteButton = new JButton("Delete");
        deleteButton.addActionListener(e -> deleteInvoice());

        inputPanel.add(addButton);
        inputPanel.add(updateButton);
        inputPanel.add(deleteButton);
        add(inputPanel, BorderLayout.SOUTH);

        JPanel selectedValuesPanel = new JPanel();
        selectedValuesPanel.setLayout(new GridLayout(1, 5));
        selectedPartNumber = new JLabel("Selected Part Number: ");
        selectedPartDescription = new JLabel("Selected Part Description: ");
        selectedQuantity = new JLabel("Selected Quantity: ");
        selectedPrice = new JLabel("Selected Price Per Item: ");
        selectedInvoiceValue = new JLabel("Selected Invoice Value: ");
        selectedValuesPanel.add(selectedPartNumber);
        selectedValuesPanel.add(selectedPartDescription);
        selectedValuesPanel.add(selectedQuantity);
        selectedValuesPanel.add(selectedPrice);
        selectedValuesPanel.add(selectedInvoiceValue);
        add(selectedValuesPanel, BorderLayout.NORTH);

        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void addInvoice() {
        try {
            String partNumber = partNumberField.getText();
            String partDescription = partDescriptionField.getText();
            int quantity = Integer.parseInt(quantityField.getText());
            double pricePerItem = Double.parseDouble(priceField.getText());

            Invoice invoice = new Invoice(partNumber, partDescription, quantity, pricePerItem);
            invoiceList.add(invoice);
            tableModel.addRow(new Object[]{partNumber, partDescription, quantity, pricePerItem, invoice.getPaymentAmount()});

            clearFields();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid input. Quantity and Price must be numbers.");
        }
    }

    private void updateInvoice() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            try {
                String partNumber = partNumberField.getText();
                String partDescription = partDescriptionField.getText();
                int quantity = Integer.parseInt(quantityField.getText());
                double pricePerItem = Double.parseDouble(priceField.getText());

                Invoice updatedInvoice = new Invoice(partNumber, partDescription, quantity, pricePerItem);
                invoiceList.set(selectedRow, updatedInvoice);

                tableModel.setValueAt(partNumber, selectedRow, 0);
                tableModel.setValueAt(partDescription, selectedRow, 1);
                tableModel.setValueAt(quantity, selectedRow, 2);
                tableModel.setValueAt(pricePerItem, selectedRow, 3);
                tableModel.setValueAt(updatedInvoice.getPaymentAmount(), selectedRow, 4);

                clearFields();
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid input. Quantity and Price must be numbers.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select an invoice to update.");
        }
    }

    private void deleteInvoice() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            invoiceList.remove(selectedRow);
            tableModel.removeRow(selectedRow);
            clearFields();
        } else {
            JOptionPane.showMessageDialog(this, "Select an invoice to delete.");
        }
    }

    private void clearFields() {
        partNumberField.setText("");
        partDescriptionField.setText("");
        quantityField.setText("");
        priceField.setText("");
        clearSelectedValues();
    }

    private void clearSelectedValues() {
        selectedPartNumber.setText("Selected Part Number: ");
        selectedPartDescription.setText("Selected Part Description: ");
        selectedQuantity.setText("Selected Quantity: ");
        selectedPrice.setText("Selected Price Per Item: ");
        selectedInvoiceValue.setText("Selected Invoice Value: ");
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new InvoiceApp());
    }
}
